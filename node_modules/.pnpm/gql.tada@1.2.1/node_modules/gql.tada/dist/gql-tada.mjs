import { parse as r, Kind as a } from "@0no-co/graphql.web";

function initGraphQLTada() {
  function graphql(n, e) {
    var i = r(n).definitions;
    var t = new Set;
    for (var s of e || []) {
      for (var u of s.definitions) {
        if (u.kind === a.FRAGMENT_DEFINITION && !t.has(u)) {
          i.push(u);
          t.add(u);
        }
      }
    }
    if (i[0].kind === a.FRAGMENT_DEFINITION && i[0].directives) {
      i[0].directives = i[0].directives.filter((r => "_unmask" !== r.name.value));
    }
    return {
      kind: a.DOCUMENT,
      definitions: i
    };
  }
  graphql.scalar = function scalar(r, a) {
    return a;
  };
  return graphql;
}

function parse(a) {
  return r(a);
}

function readFragment(r, a) {
  return a;
}

function maskFragments(r, a) {
  return a;
}

function unsafe_readResult(r, a) {
  return a;
}

var n = initGraphQLTada();

export { n as graphql, initGraphQLTada, maskFragments, parse, readFragment, unsafe_readResult };
//# sourceMappingURL=gql-tada.mjs.map
